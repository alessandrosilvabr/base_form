{
  "name": "BaseForm",
  "tagline": "A simple and small form objects Rails plugin for ActiveRecord based projects.",
  "body": "## Why?\nIn a development day-to-day basis, we commonly are confronted with situations where we\nneed to save data in more than one database table, running it's own validations, and\nthe validations of the all context together. In most cases a Form Object is a perfect\nsolution to deliver those records in a fun and maintenable code.\n\nActually, there's a lot of another gems to do that, like the great\n[reform](https://github.com/apotonick/reform) or\n[activeform-rails](https://github.com/GCorbel/activeform-rails), which are a more complete\nsolution for this problem. But, if you are looking for something lighter, maybe this\ngem could fit well for you.\n\n## Installation\nAdd this line to your application's Gemfile:\n\n```ruby\ngem 'base_form'\n```\n\nAnd then execute:\n```bash\n$ bundle\n```\n\nOr install it yourself as:\n```bash\n$ gem install base_form\n```\n\n## Usage\nLet's suppose you want to create a\nsignup form (you can check this example in the dummy app on this gem specs), with\nreceiving a user email, a user password, a user password confirmation, and a plan. In your\nsignup form, you need to create an account for this user, associate it to a entrance plan\nif it's not given, and make this user as an owner of this recently created account. Of course,\nin this case, a simple user model saving will not be sufficient to save all those data and\naccomplish with the requested business logic. So, you go to the Form Objects way,\ninstalls this gem, creates your Ruby class to handle all this logic:\n\n```ruby\nclass SignupForm < BaseForm::Form\n\nend\n```\n\nWith this empty clWith this empty clWith this empty clWith this empty clWith this empty clWith this ermWith this empty clWith SignupWith this eForm:With this empty clWith this empty clWith swordWith tribute :password_confirWith this empty teWith t, Plan, default:With this empty clWith thd\nWith totWith totWith totWith ties a Plan to thWith totWith totWith totWith tiesalWith totWith totWith totWith ties a Plan to thWith totWith totWith totWith tiesalaWith totWith totWith totWith ties a Plan to thWith totWith totWith totWith tiesalWith totseWith totWith totWith totWith ties a Plan to thWith totWith totWith totWith tiesalWith todoWith totWith totWith totWith ties a Plan to thWith totWith totWith totWith tiesalWith totWithBaWith totWith totWith totWith ties a Plan to thWith totWith totWith totWith tiesalWith tot``With totWith totWith totWith ties a Plan to thWith totWith totWith totWith tiesateWith totWith totWith totWith ties a Plan to thWith totWith totWith rm With td With totWith totWith totWith tieimes you donWith totWith totWith totWith ties a Plan to thWith totWith totWith totWith tiesalWith totWith totWith totWith ties a Plan to thWith totWith totWith totWith tiesalaWith totWith totWith totWith ties a Plan to thWith totWith totWith totWith tiesalWith totseWith totWith totWith totWith ties od it in the `errors` object in your form itself in case of some validation fails.\nIf all is fine, the form instance is returned to you and you will be able to call\nmethods like `persisted?`, `account`, `user`, `valid?` and etc...\n\nAre you still there? :D\n\nLet's see this class complete?\n\n```ruby\nclass SignupForm < BaseForm\n  use_form_records :account, :user\n\n  attribute :email\n  attribute :password\n  attribute :password_confirmation\n  attribute :plan, Plan, default: proc { Plan.default }\n\n  validates :plan, presence: true\n\n  private\n\n  def persist\n    @account ||= Account.create plan: plan\n    @user ||= account.users.create user_params\n  end\n\n  def user_params\n    {\n      email: email,\n      password: password,\n      password_confirmation: password_confirmation,\n      account_owner: true\n    }\n  end\nend\n```\n\nHmmmm, this looks pretty nice!\n\nI hope this helps someone in the same way it helped me. Thanks!\n\n## Contributing\n- Fork it\n- Make your implementations\n- Send me a pull request\n\nThank you!\n\n## License\nThe gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
